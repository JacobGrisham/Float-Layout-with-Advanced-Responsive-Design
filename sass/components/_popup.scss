.popup {
  height: 100vh;
  width: 100vw;
  top: 0;
  left: 0;
  position: fixed;
  background-color: rgba($color-black, .3);
  z-index: 3000;

  opacity: 0;
  visibility: hidden;
  // These two properties are to initially hide the popup //

  -webkit-backdrop-filter: blur(10px);
  backdrop-filter: blur(10px);
  // This property is to add background blur //
  /* If this didn't work on google chrome we would use supports:

  @supports(-webkit-backdrop-filter: blur(10px)) or (backdrop-filter: blur(10px)) {
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
    background-color: rgba($color-black, .3);
  }

  Therefore if the properties are supported, the following code is applied

  */

  transition: all .5s;

  &:target {
    opacity: 1;
    visibility: visible;
  }
  // The target pseudo-class refers to the target in the html. The target in this case is #popup in the html line <a href="#popup" class="btn btn--white">Learn more!</a> //

  &:target &__content {
    opacity: 1;
    transform: translate(-50%,-50%) scale(1);
  }
  // This creates the effect that the popup content comes from behind the page to full size //

  &__close {
    &:link,
    &:visited {
      height: 3rem;
      width: 3rem;
      position: absolute;
      top: 2rem;
      right: 2rem;
      font-size: 3rem;
      text-decoration: none;
      transition: all .2s;
    }

    &:hover {
      color: $color-primary;
    }
  }


  &__content {
    height: 70%;
    width: 70%;
    @include center;
    border-radius: $subtle-rounded-corner;
    background-color: $color-white;
    font-size: $author-default-font-size;
    display: table;
    overflow: hidden;
    // This prevents the images from overlapping the border radius //

    opacity: 0;
    transform: translate(-50%,-50%) scale(.25);
    // We have to repeat this translate from our mixin. This is for two reasons. First, the cascade during the parsing phase uses this last transform. Secondly, you can only have one transform. //
    // These two lines of code are used to set the initial conditions for the selector &:target &__content //
    transition: all .5s .3s;
    // This animates the popup content //

    @include respond(tablet-portrait){
      height: 90%;
      width: 90%;
    }
  }

  &__left {
    width: 33.33333333%;
    // It's not an exageration to put so many 3's //
    float: left;
    display: table-cell;
    // This will automatically give the left and the right the same height //
    vertical-align: middle;
    // This vertically centers the content. Used with table cells //

    @include respond(tablet-portrait){
      display: none;
    }
  }

  &__right {
    width: 66.66666666%;
    float: right;
    display: table-cell;
    // This will automatically give the left and the right the same height //
    vertical-align: middle;
    // This vertically centers the content. Used with table cells //
    padding: 3rem 5rem;
    position: relative;

    @include respond(tablet-portrait){
      width: 100%;
    }
  }
  // Using the table values is a hack to get the alignment and positioning that we want //

  &__image {
    display: block;
    width: 100%;
    height: 100%;

    @include respond([tablet-portrait]){
      display: none;
    }
  }

  &__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;

    -moz-column-count: 2;
    -moz-column-gap: 4rem;
    -moz-column-rule: 1px solid $color-grey-light-2;

    column-count: 2;
    // This creates two columns for the text. CSS will automatically balance the text among the columns //
    column-gap: 4rem;
    column-rule: 1px solid $color-grey-light-2;
    // Border between the two columns //

    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;
    // Normally, don't manually add these prefixes for compatibility for different web browser. It's better to use tools such as auto-prefixer //
    hyphens: auto;
    // In order for this to work, you need to set the <html lang="en", or whatever language you're working with> //
  }
}