.composition {
  position: relative;
  &__photo {
    width: 55%;
    // Always define the width of images in percentages to follow the principles of responsive web design //
    box-shadow: $shadow-near;
    border-radius: 2px;
    position: absolute;
    // We declare the position for the compoisiton__photo class as absolute so that the photos can stack on top of one another. Absolute position is placed relative to the first parent it encounters. In this case it's .composition //
    z-index: 10;
    // We declare the z-index as 10 arbitrarily. It's just our starting point //
    transition: all .2s;
    outline-offset: 0.5rem;
    // This allows a border that isn't flush with the element //

    @include respond(tablet-portrait){
      float: left;
      position: relative;
      width: 33.33333333%;
    }

      &--p1{
        left: 0;
        top: -2rem;

        @include respond(tablet-portrait){
          top: 0;
          transform: scale(1.2);
        }
      }

      &--p2{
        right: 0;
        top: 2rem;

        @include respond(tablet-portrait){
          top: -1rem;
          transform: scale(1.3);
        }
      }

      &--p3{
        left: 20%;
        top: 10rem;

        @include respond(tablet-portrait){
          top: 1rem;
          left: 0;
          transform: scale(1.1);
        }
      }

      &:hover {
        outline: .3rem solid $color-primary;
        transform: scale(1.05) translateY(-1rem);
        box-shadow: $shadow-far;
        z-index: 20;
        // Delcaring the z-index as 20 allows the picture to come to the forefront //
      }
  }

  &:hover &__photo:not(:hover){
    transform: scale(.9);
    box-shadow: 0 .3rem 0.5rem rgba($color-black, .9);
  }
  // This makes the unselected photos shrink in size //
}
